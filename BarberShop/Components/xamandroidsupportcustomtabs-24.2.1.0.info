{"Name":"Android Support Custom Tabs Library","Id":3112,"Alias":"xamandroidsupportcustomtabs","Description":"\n# Custom Tabs Android Support Library\n\nApp developers face a choice when a user taps a URL to either launch a browser, or build their own in-app browser using WebViews.\n\nBoth options present challenges â€” launching the browser is a heavy context switch that isn\u0027t customizable, while WebViews don\u0027t share state with the browser and add maintenance overhead.\n\nCustom tabs give apps more control over their web experience, and make transitions between native and web content more seamless without having to resort to a WebView.\n\nCustom tabs allow an app to customize how Chrome looks and feels. An app can change things like:\n - Toolbar color\n - Enter and exit animations\n - Add custom actions to the Chrome toolbar and overflow menu\n - Custom tabs also allow the developer to pre-start Chrome and pre-fetch content for faster loading.\n\n\n### When should I use Chrome custom tabs vs WebView?\n\nThe WebView is good solution if you are hosting your own content inside your app. If your app directs people to URLs outside your domain, we recommend that you use Chrome custom tabs for these reasons:\n\n - Simple to implement. No need to build code to manage requests, permission grants or cookie stores.\n - UI customization:\n   - Toolbar color\n   - Action button\n   - Custom menu items\n   - Custom in/out animations\n - Navigation awareness: the browser delivers a callback to the application upon an external navigation.\n - Performance optimization:\n    - Pre-warming of the Browser in the background, while avoiding stealing resources from the application.\n    - Providing a likely URL in advance to the browser, which may perform speculative work, speeding up page load time.\n - Lifecycle management: the browser prevents the application from being evicted by the system while on top of it, by raising its importance to the \"foreground\" level.\n - Shared Cookie Jar and permissions model so users don\u0027t have to log in to sites they are already connected to, or re-grant permissions they have already granted.\n -  If the user has turned on Data Saver, they will still benefit from it.\nSynchronized AutoComplete across devices for better form completion.\n - Simple customization model.\n - Quickly return to app with a single tap.\n - You want to use the latest browser implementations on devices pre-Lollipop (auto updating WebView) instead of older WebViews.\n\n\n\n\n## Android Support Libraries\n\nThe Android Support Libraries are a set of code libraries that provide backward-compatible versions of Android framework APIs as well as features that are only available through the library APIs. Each Support Library is backward-compatible to a specific Android API level. This design means that your applications can use the libraries\u0027 features and still be compatible with devices running older versions of Android.\n\nIncluding the Support Libraries in your Android project is considered a best practice for application developers, depending on the range of platform versions your app is targeting and the APIs that it uses. Using the features the libraries provide can help you improve the look of your application, increase performance and broaden the reach of your application to more users. \n\n\n\n","Version":"24.2.1.0","Summary":"Provide backward-compatible versions of Android framework APIs.","QuickStart":"Custom Tabs Support Library\n===========================\n\nAs of Chrome 45, Chrome custom tabs is now generally available to all users of Chrome, on all of Chrome\u0027s supported Android versions (Jellybean onwards). Please note that the API will change slightly over the coming weeks.\n\n\n### Loading a Page\n\nYou can load pages without any customization very easily:\n\n```csharp\nvar mgr = new CustomTabsActivityManager (this);\nmgr.CustomTabsServiceConnected += delegate {\n\tmgr.LaunchUrl (\"http://xamarin.com\");\n};\nmgr.BindService ();\n```\n\n### Customization\n\nYou can also customize the look and feel of the browser tab. You can change the background colour of the toolbar, customize start and exit animations, add items to the overflow menu, and even add icons to the action bar!\n\n```csharp\nvar builder = new CustomTabsIntent.Builder (customTabs.Session)\n\n\t// Xamarin Blue\n\t.SetToolbarColor (Color.Argb (255, 52, 152, 219))\n\t\n\t// Show Title of page, not just URL\n\t.SetShowTitle (true)\n\t\n\t// Customize the Animations for displaying the browser\n\t.SetStartAnimations (this, Resource.Animation.slide_in_right, Resource.Animation.slide_out_left)\n\t.SetExitAnimations (this, Resource.Animation.slide_in_left, Resource.Animation.slide_out_right);\n\nvar intent = builder.Build ();\n\nvar mgr = new CustomTabsActivityManager (this);\nmgr.CustomTabsServiceConnected += delegate {\n\tmgr.LaunchUrl (\"http://xamarin.com\", intent);\n};\nmgr.BindService ();\n```\n\n\n#### Adding Menu Items\n\nIt\u0027s also possible to add your own menu items to the overflow menu:\n\n```csharp\nvar menuIntent = new Intent (typeof (MainActivity));\nmenuIntent.PutExtra (\"hug\", true);\n\n// Optional animation configuration when the user clicks menu items.\nvar menuBundle = ActivityOptions.MakeCustomAnimation (this, \n\t\t\t\t\tAndroid.Resource.Animation.SlideInLeft,\n                \tAndroid.Resource.Animation.SlideOutRight).ToBundle ();\n                \t\nvar pi = PendingIntent.GetActivity (\n\t\t\tApplicationContext, 0, menuIntent, 0, menuBundle);\n\nbuilder.AddMenuItem (\"Hug a Monkey\", pi);\n```\n\n#### Adding Action Button\n\nYou can also add your own buttons to the Toolbar:\n\n```csharp\n// An example intent that sends an email.\nvar actionIntent = new Intent(Intent.ActionSend);\nactionIntent.SetType(\"*/*\");\nactionIntent.PutExtra (Intent.ExtraEmail, \"support@xamarin.com\");\nactionIntent.PutExtra (Intent.ExtraSubject, \"Help me make awesome apps!\");\n\nvar pi = PendingIntent.GetActivity (ApplicationContext, 0, actionIntent, 0);\n\nvar icon = BitmapFactory.DecodeResource (Resources, Resource.Drawable.Icon);\n\nbuilder.SetActionButton (icon, pi);\n```\n\n### Fall back gracefully\n\nNot every user will have Chrome installed, so you should build your app to gracefully fall back to other methods of handling displaying your URL.  If your call to `BindService` returns false, you should assume Custom Tabs will not work and should handle the URL another way:\n\n```csharp\nif (!mgr.BindService ()) {\n   // Cannot use Custom Tabs,\n   // Launch the URL another way\n}\n```\n\n","Hash":"7ec148f7884a3b3fdda21bec2f9e8d06","TargetPlatforms":["android"],"TrialHash":null}